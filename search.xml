<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JDBC笔记</title>
    <url>/2022/03/26/JDBC%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="JDBC-简介"><a href="#JDBC-简介" class="headerlink" title="JDBC 简介"></a>JDBC 简介</h1><p>JDBC是Java DataBase Connectivity的缩写，全称为java数据库连接。JDBC就是使用Java语言操作关系型数据库的一套API。官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口（interface），各个数据库厂商去实现这套接口，提供数据库驱动jar包，我们可以使用这套接口（JDBC）编程，真正执行的代码是驱动jar包中的实现类。</p>
<p><img src="/2022/03/26/JDBC%E7%AC%94%E8%AE%B0/diagram_one.png" alt="diagram_one"></p>
<h1 id="JDBC-API详解"><a href="#JDBC-API详解" class="headerlink" title="JDBC API详解"></a>JDBC API详解</h1><blockquote>
<p><a href="https://docs.oracle.com/javase/8/docs/api/java/sql/package-summary.html">Package java.sql</a> Provides the API for accessing and processing data stored in a data source (usually a relational database) using the JavaTM programming language.</p>
</blockquote>
<h2 id="DriverManager类"><a href="#DriverManager类" class="headerlink" title="DriverManager类"></a>DriverManager类</h2><p>类路径：java.sql.DriverManager</p>
<ol>
<li><p>注册驱动</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类加载之后会自动执行静态代码块中的内容</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DriverManager.registerDriver(<span class="keyword">new</span> Driver());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException var1) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Can&#x27;t register driver!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>java.sql.DriverManager类下的静态方法registerDriver</strong></p>
<p><img src="/2022/03/26/JDBC%E7%AC%94%E8%AE%B0/registerDriver.png" alt="registerDriver.png"></p>
</li>
</ol>
<ol start="2">
<li><p>获取连接对象</p>
<p><strong>java.sql.DriverManager类下的静态方法getConnection</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">(String url,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       String user,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       String password)</span></span></span><br><span class="line"><span class="function">                                <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function"><span class="comment">// url jdbc:mysql://ip地址(域名)/数据库名称?参数键值对1&amp;参数键值对2</span></span></span><br><span class="line"><span class="function"><span class="comment">// jdbc:mysql://localhost:3306/jdbc</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Connection接口"><a href="#Connection接口" class="headerlink" title="Connection接口"></a>Connection接口</h2><p>接口路径： java.sql.Connection</p>
<ol>
<li><p>获取执行SQL语句的对象</p>
</li>
<li><p>管理事务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取执行sql的对象</span></span><br><span class="line"><span class="comment">// Statement createStatement() throws SQLException</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 管理事务</span></span><br><span class="line"><span class="comment">// void setAutoCommit(boolean autoCommit) throws SQLException</span></span><br><span class="line"><span class="comment">// 参数autoCommit - true启用自动提交模式; false禁用它</span></span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 开启事务</span></span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">int</span> count1 = stmt.executeUpdate(sql1);</span><br><span class="line">            System.out.println(count1);</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">3</span> / <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> count2 = stmt.executeUpdate(sql2);</span><br><span class="line">            System.out.println(count2);</span><br><span class="line">            <span class="comment">// 提交事务</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 回滚事务</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            stmt.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="Statement接口"><a href="#Statement接口" class="headerlink" title="Statement接口"></a>Statement接口</h2><p>接口路径： java.sql.Statement</p>
<p><strong>执行sql语句</strong></p>
<p><img src="/2022/03/26/JDBC%E7%AC%94%E8%AE%B0/executeUpdate.png" alt="executeUpdate.png"></p>
<p><img src="/2022/03/26/JDBC%E7%AC%94%E8%AE%B0/executeQuery.png" alt="executeQuery.png"></p>
<h2 id="ResultSet接口"><a href="#ResultSet接口" class="headerlink" title="ResultSet接口"></a>ResultSet接口</h2><p>接口路径：java.sql.ResultSet</p>
<p>执行DQL语句，返回ResultSet对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">next</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function"><span class="comment">// Moves the cursor forward one row from its current position. A ResultSet cursor is initially positioned before the first row; </span></span></span><br><span class="line"><span class="function"><span class="comment">// Returns:true if the new current row is valid; false if there are no more rows</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getInt</span><span class="params">(<span class="keyword">int</span> columnIndex)</span>  <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function"><span class="comment">// Retrieves the value of the designated column in the current row of this ResultSet object </span></span></span><br><span class="line"><span class="function"><span class="comment">// Parameters:  columnIndex - the first column is 1, the second is 2, ...</span></span></span><br><span class="line"><span class="function">String <span class="title">getString</span><span class="params">(String columnLabel)</span> <span class="keyword">throws</span> SQLException</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为列号</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    String sno = resultSet.getString(<span class="number">1</span>);</span><br><span class="line">    String sname = resultSet.getString(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> smoney = resultSet.getInt(<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;学号：&quot;</span> + sno + <span class="string">&quot; 姓名：&quot;</span> +  sname + <span class="string">&quot; 账户：&quot;</span> + smoney);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">学号：1720060122 姓名：Taylor 账户：100</span></span><br><span class="line"><span class="comment">学号：1720060123 姓名：Jack 账户：100</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数为列名</span></span><br><span class="line"><span class="keyword">while</span> (resultSet.next()) &#123;</span><br><span class="line">    String sno = resultSet.getString(<span class="string">&quot;sno&quot;</span>);</span><br><span class="line">    String sname = resultSet.getString(<span class="string">&quot;sname&quot;</span>);</span><br><span class="line">    <span class="keyword">int</span> smoney = resultSet.getInt(<span class="string">&quot;smoney&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;学号：&quot;</span> + sno + <span class="string">&quot; 姓名：&quot;</span> +  sname + <span class="string">&quot; 账户：&quot;</span> + smoney);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>从数据库中获取数据，然后将其数据封装到对象中，最后在存储在ArrayList集合当中。</strong></p>
<h2 id="PreparedStatement接口"><a href="#PreparedStatement接口" class="headerlink" title="PreparedStatement接口"></a>PreparedStatement接口</h2><p>接口路径：java.sql.PreparedStatement</p>
<p>作用：预编译sql语句并执行，预防sql注入问题，将敏感字符进行转义。</p>
<blockquote>
<p> <strong>SQl注入：</strong>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。</p>
</blockquote>
<p><img src="/2022/03/26/JDBC%E7%AC%94%E8%AE%B0/sql.png" alt="sql.png"></p>
<p><img src="/2022/03/26/JDBC%E7%AC%94%E8%AE%B0/sql%E6%B3%A8%E5%85%A5%E4%BF%AE%E6%94%B9.png" alt="sql注入修改.png"></p>
<p>用户输入<strong>随意字符</strong>的用户名，输入密码为’ or ‘1’ = ‘1，用户就可以登录成功。这显然是不合理的。为了解决这个问题，就要用到PreparedStatement。</p>
<ol>
<li><p>获取PreparedStatement对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SQl语句中的参数值，使用?占位符来替代</span></span><br><span class="line">String sql = <span class="string">&quot;select * from user where username=? and password=?&quot;</span>;</span><br><span class="line"><span class="comment">// 通过Connection对象获取，并传入对应的sql语句</span></span><br><span class="line">PreparedStatement pstmt = conn.preparedStatement(sql);</span><br></pre></td></tr></table></figure></li>
<li><p>设置参数值(给？赋值)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setInt</span><span class="params">(<span class="keyword">int</span> parameterIndex, <span class="keyword">int</span> x)</span> <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">Parameters:</span></span><br><span class="line"><span class="function">parameterIndex - the first parameter is 1, the second is 2, ...</span></span><br><span class="line"><span class="function">x - the parameter value</span></span><br></pre></td></tr></table></figure></li>
<li><p>执行sql</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ResultSet <span class="title">executeQuery</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span></span><br><span class="line"><span class="function">Executes the SQL query in <span class="keyword">this</span> PreparedStatement object and returns the ResultSet object generated by the query.</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreparedStatementDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        String url = <span class="string">&quot;jdbc:mysql://localhost:3306/jdbc&quot;</span>;</span><br><span class="line">        String username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;wangpeng&quot;</span>;</span><br><span class="line">        Connection conn = DriverManager.getConnection(url, username, password);</span><br><span class="line">        String name = <span class="string">&quot;wangpeng&quot;</span>;</span><br><span class="line">        String pwd = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        String sql = <span class="string">&quot;select * from user where name = ? and pwd = ?&quot;</span>;</span><br><span class="line">        PreparedStatement preparedStatement = conn.prepareStatement(sql);</span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>,name);</span><br><span class="line">        preparedStatement.setString(<span class="number">2</span>,pwd);</span><br><span class="line">        ResultSet resultSet = preparedStatement.executeQuery();</span><br><span class="line">        <span class="keyword">if</span>(resultSet.next()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录失败！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        resultSet.close();</span><br><span class="line">        preparedStatement.close();</span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记一</title>
    <url>/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h1><p>添加用户<code>webber</code>，使用命令<code>useradd webber</code></p>
<p>该命令创建的用户的组名默认为其用户名本身，也就是webber。</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cuseradd.png" alt="useradd.png"></p>
<h1 id="给用户添加密码"><a href="#给用户添加密码" class="headerlink" title="给用户添加密码"></a>给用户添加密码</h1><p>给用户<code>webber</code>添加密码，使用命令<code>passwd webber</code></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cuserpassword.png" alt="userpassword.png"></p>
<h1 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h1><ul>
<li>删除用户<code>webber</code>,但是要保留家目录。<code>userdel webber</code></li>
<li>删除用户jack以及用户主目录。<code>userdel -r jack</code></li>
</ul>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cdelwebber.png" alt="delwebber.png"></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cdeljack.png" alt="deljack.png"></p>
<h1 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h1><p>切换用户(switch user)命令：<code>su - 切换用户名</code></p>
<p>注意：从<strong>权限高</strong>的用户切换到<strong>权限低</strong>的用户，不需要输入密码。而<strong>普通用户之间</strong>切换以及普通用户切换到root用户，则需要输入对方的密码。当需要返回到之前的用户，可以使用<strong>logout/exit</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 ~]# su - wangpeng</span><br><span class="line">上一次登录：五 1月 14 20:25:04 CST 2022从 10.11.1.119pts/1 上</span><br><span class="line">[wangpeng@CentOS7 ~]$ su - root</span><br><span class="line">密码：</span><br><span class="line">上一次登录：六 1月 15 00:17:52 CST 2022从 10.11.1.119pts/0 上</span><br></pre></td></tr></table></figure>

<h1 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h1><p>系统可以对多个用户进行统一管理。</p>
<ul>
<li>新增组，<code>groupadd 组名</code></li>
<li>删除组，<code>groupdel 组名</code></li>
<li>添加用户的同时添加组，基本语法：**<code>useradd -g 用户组 用户名</code>**</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 ~]# groupadd huaguoshan</span><br><span class="line">[root@CentOS7 ~]# useradd -g huaguoshan sunwukong</span><br><span class="line">[root@CentOS7 ~]# id sunwukong</span><br><span class="line">uid=1001(sunwukong) gid=1001(huaguoshan) 组=1001(huaguoshan)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改用户的用户组，**<code>usermode -g 用户组 用户名</code> **</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 home]# groupadd xitianqujing</span><br><span class="line">[root@CentOS7 home]# id sunwukong</span><br><span class="line">uid=1001(sunwukong) gid=1001(huaguoshan) 组=1001(huaguoshan)</span><br><span class="line">[root@CentOS7 home]# usermod -g xitianqujing sunwukong</span><br><span class="line">[root@CentOS7 home]# id sunwukong</span><br><span class="line">uid=1001(sunwukong) gid=1002(xitianqujing) 组=1002(xitianqujing)</span><br></pre></td></tr></table></figure>

<h1 id="用户和用户组的相关文件"><a href="#用户和用户组的相关文件" class="headerlink" title="用户和用户组的相关文件"></a>用户和用户组的相关文件</h1><ul>
<li>**<code>/etc/passwd</code> **用户(user)的配置文件，记录用户的各种信息</li>
<li><strong><code>/etc/shadow</code></strong> 口令的配置文件</li>
<li><strong><code>/etc/group</code></strong> 组(group)的配置文件，记录用户组的相关信息</li>
</ul>
<h1 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h1><p>运行级别说明：</p>
<ul>
<li>0：关机</li>
<li>1：单用户</li>
<li>2：多用户状态，没有网络服务</li>
<li><strong>3：多用户状态，有网络服务</strong></li>
<li>4：系统未使用</li>
<li><strong>5：图形界面</strong></li>
<li>6：系统重启</li>
</ul>
<p>命令：**<code>init 0/1/2/3/4/5/6</code>**</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> multi-user.target: analogous to runlevel 3</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> graphical.target: analogous to runlevel 5</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To view current default target, run:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl get-default</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> To <span class="built_in">set</span> a default target, run:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> systemctl set-default TARGET.target</span></span><br></pre></td></tr></table></figure>

<p><strong>查看当前默认运行级别以及将运行级别5切换到运行级别3</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 etc]# systemctl get-default</span><br><span class="line">graphical.target</span><br><span class="line">[root@CentOS7 etc]# systemctl set-default multi-user.target</span><br><span class="line">Removed symlink /etc/systemd/system/default.target.</span><br><span class="line">Created symlink from /etc/systemd/system/default.target to /usr/lib/systemd/system/multi-user.target.</span><br></pre></td></tr></table></figure>

<h1 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h1><ol>
<li><strong>man</strong>获取帮助信息，<code>mam [命令或配置文件]</code></li>
<li><strong>help</strong>获取shell内置命令，<code>help 命令</code></li>
</ol>
<h1 id="文件目录操作"><a href="#文件目录操作" class="headerlink" title="文件目录操作"></a>文件目录操作</h1><p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/directory.jpg" alt="directory"></p>
<ul>
<li><p><strong><code>pwd</code>指令</strong></p>
<p>功能描述：显示当前工作目录的绝对路径</p>
</li>
<li><p><strong><code>ls</code>指令</strong></p>
<p>基本语法：<code>ls [选项][目录或文件]</code></p>
<p>常用选项：</p>
<p>-a：显示当前目录所有的文件和目录，包括隐藏文件。</p>
<p>-l：显示当前目录下文件的详细信息</p>
</li>
<li><p><strong><code>cd</code>指令</strong></p>
<p>基本语法：<code>cd [绝对路径或相对路径]</code></p>
<p><code>cd ~ 或者cd</code>：进入家目录</p>
<p>普通用户为 /home/用户名，root用户为/root</p>
<p><code>cd ..</code>：进入当前目录的上一级目录</p>
</li>
<li><p><strong><code>mkdir</code>指令</strong></p>
<p>功能描述：该指令用于创建目录</p>
<p>基本语法：<code>mkdir [选项] 目录</code></p>
<p>常用选项：-p是创建多级目录</p>
</li>
<li><p><strong><code>rmdir</code>指令</strong></p>
<p>功能描述：该指令用于删除空目录</p>
<p>如果需要删除非空目录，则可以使用**<code>rm -rf 需要删除的目录或文件</code>**</p>
<p>-r   Recursive  递归的</p>
<p>-f   Force     强制的</p>
</li>
<li><p><strong><code>cp</code>指令</strong></p>
<p>功能描述：将文件拷贝到指定目录下</p>
<p>基本语法：**<code>cp [选项] source destination</code>**</p>
<p>常用选项：-r   递归复制整个文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 home]# cd hello</span><br><span class="line">[root@CentOS7 hello]# touch hello.txt</span><br><span class="line">[root@CentOS7 hello]# touch hello1.txt</span><br><span class="line">[root@CentOS7 hello]# ls </span><br><span class="line">hello1.txt  hello.txt</span><br><span class="line">[root@CentOS7 hello]# cd ..</span><br><span class="line">[root@CentOS7 home]# cp -r ./hello /root</span><br><span class="line">[root@CentOS7 home]# ls /root/hello</span><br><span class="line">hello1.txt  hello.txt</span><br></pre></td></tr></table></figure></li>
<li><p><strong><code>mv</code>指令</strong></p>
<p>功能描述：移动文件或目录以及可以进行重命名的操作</p>
<p><strong>案例一：将home目录下的<code>cat.txt</code>重命名为<code>pig.txt</code></strong></p>
</li>
</ul>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Crename.png" alt="rename.png"></p>
<p>​       <strong>案例二：将home目录下的<code>pig.txt</code>移动到root目录下</strong></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cmove.png" alt="move"></p>
<p>​       <strong>案例三：移动整个目录，将home目录下的animal移动到root目录下</strong></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cmove%E7%9B%AE%E5%BD%95.png" alt="move目录.png"></p>
<ul>
<li><p><strong><code>cat</code>指令</strong></p>
<p>功能描述：查看文件内容，该命令只能浏览文件，而不能修改文件。</p>
<p>基本语法：**<code>cat [选项] 要查看的文件</code>**</p>
<p>常用选项：-n   可以显示行号             </p>
<p>为了浏览方便，我们一般会带上管道命令  | more，示例如下。</p>
<p><code>[root@CentOS7 ~]# cat -n /etc/profile | more</code></p>
</li>
<li><p><strong><code>more</code>指令</strong></p>
<p>基本语法：<strong>more 要查看的文件</strong></p>
<blockquote>
<p>Linux more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">空白键（space）</td>
<td align="center">代表向下翻一页</td>
</tr>
<tr>
<td align="center">Enter</td>
<td align="center">代表向下翻一行</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center">代表立即离开</td>
</tr>
<tr>
<td align="center">=</td>
<td align="center">输出当前行的行号</td>
</tr>
<tr>
<td align="center">:f</td>
<td align="center">输出文件名和当前行的行号</td>
</tr>
</tbody></table>
<ul>
<li><p><strong><code>less指令</code></strong></p>
<p>基本语法：<strong>less 要查看的文件</strong></p>
<blockquote>
<p>less指令用来分屏查看文件内容，它的功能与more指令类似，less指令在显示文件内容时，并不是一次将整个文件加载之后再显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。</p>
</blockquote>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">操作</th>
<th align="center">功能说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">空白键（space）</td>
<td align="center">向下翻动一页</td>
</tr>
<tr>
<td align="center">PageUp</td>
<td align="center">向上翻动一页</td>
</tr>
<tr>
<td align="center">PageDown</td>
<td align="center">向下翻动一页</td>
</tr>
<tr>
<td align="center">/字符串</td>
<td align="center">向下搜寻字符串的功能；n：向下查找；N：向上查找</td>
</tr>
<tr>
<td align="center">?字符串</td>
<td align="center">向上搜寻字符串的功能；n：向下查找；N：向上查找</td>
</tr>
<tr>
<td align="center">q</td>
<td align="center">离开</td>
</tr>
</tbody></table>
<ul>
<li><p><strong><code>echo指令</code></strong></p>
<p>基本语法：echo  输出内容</p>
</li>
</ul>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cecho.png" alt="echo.png"></p>
<ul>
<li><p><strong><code>head指令</code></strong></p>
<blockquote>
<p>head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容，也可以查看指定行数，基本语法为：head -n 5 文件（该指令为查看文件前5行内容，5可以为任意行数）</p>
</blockquote>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 ~]# head /etc/profile</span><br><span class="line"># /etc/profile</span><br><span class="line"></span><br><span class="line"># System wide environment and startup programs, for login setup</span><br><span class="line"># Functions and aliases go in /etc/bashrc</span><br><span class="line"></span><br><span class="line"># It&#x27;s NOT a good idea to change this file unless you know what you</span><br><span class="line"># are doing. It&#x27;s much better to create a custom.sh shell script in</span><br><span class="line"># /etc/profile.d/ to make custom changes to your environment, as this</span><br><span class="line"># will prevent the need for merging in future updates.</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 ~]# head -n 5 /etc/profile</span><br><span class="line"># /etc/profile</span><br><span class="line"></span><br><span class="line"># System wide environment and startup programs, for login setup</span><br><span class="line"># Functions and aliases go in /etc/bashrc</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong><code>tail指令</code></strong></p>
<blockquote>
<p>tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容，也可以查看指定行数，基本语法为：tail -n 5 文件（该指令为查看文件后5行内容，5可以为任意行数）</p>
</blockquote>
</li>
<li><p><strong><code>&gt;指令 和 &gt;&gt;指令</code></strong></p>
<p>基本语法：</p>
<ol>
<li><code>ls -l &gt; a.txt</code>    （功能描述：将该目录下的内容<strong>覆盖写入</strong>到<code>a.txt</code>中）</li>
<li><code>cat hello.txt &gt;&gt; b.txt</code>      (功能描述：将hello.txt的内容<strong>追加写入</strong>到<code>b.txt</code>中)</li>
</ol>
</li>
</ul>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5C%E8%A6%86%E7%9B%96%E5%86%99%E5%85%A5.png" alt="覆盖写入.png"></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cadd.png" alt="add.png"></p>
<ul>
<li><p><strong><code>ln指令</code></strong></p>
<blockquote>
<p>类似于windows中的快捷方式</p>
</blockquote>
<p>基本语法：**<code>ln -s [源文件] [软链接名]</code>**</p>
<p>案例一：在<code>/home</code>目录下创建一个软链接<code>myroot</code>，链接到<code>/root</code>目录</p>
</li>
</ul>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Csoftware-link.png" alt="software-link.png"></p>
<h1 id="关机-amp-重启命令"><a href="#关机-amp-重启命令" class="headerlink" title="关机&amp;重启命令"></a>关机&amp;重启命令</h1><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>shutdown -h now</td>
<td>立刻进行</td>
</tr>
<tr>
<td>shutdown -h 1</td>
<td>1分钟之后关机</td>
</tr>
<tr>
<td>shutdown -r now</td>
<td>现在重启</td>
</tr>
<tr>
<td>halt</td>
<td>关机</td>
</tr>
<tr>
<td>reboot</td>
<td>重启</td>
</tr>
<tr>
<td>sync</td>
<td>把内存的数据同步到磁盘</td>
</tr>
</tbody></table>
<h1 id="查找指令"><a href="#查找指令" class="headerlink" title="查找指令"></a>查找指令</h1><ul>
<li><strong><code>find指令</code></strong></li>
</ul>
<blockquote>
<p>Linux find 命令用来在指定目录下查找文件。</p>
</blockquote>
<p>基本语法：<code>find [搜索范围] [选项]</code></p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-name  filename</td>
<td>按照指定的文件名来查找文件</td>
</tr>
<tr>
<td>-user  username</td>
<td>按照所属用户名来查找文件</td>
</tr>
<tr>
<td>-size</td>
<td>按照文件大小来查找文件</td>
</tr>
</tbody></table>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查找home目录下的hello.txt文件</span></span><br><span class="line">[root@CentOS7 home]# find /home -name hello.txt</span><br><span class="line">/home/hello.txt</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找home目录下用户wangpeng创建的文件</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># find /home -user wangpeng</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找根目录下大小大于200M的文件</span></span><br><span class="line"><span class="comment"># 注意：+n 代表大于   -n 代表小于  n 代表等于</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># find / -size +200M</span></span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong><code>which</code>指令</strong></p>
<blockquote>
<p>该指令可以查看某个指令在哪个目录下</p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看ls指令在哪个目录</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># which ls</span></span><br><span class="line"><span class="built_in">alias</span> ls=<span class="string">&#x27;ls --color=auto&#x27;</span></span><br><span class="line">	/usr/bin/ls</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong><code>grep指令</code></strong></p>
<blockquote>
<p>grep指令为过滤查找，通常与管道命令一起使用，管道符号”|”，表示将前一个命令的处理结果传递给后面的命令处理</p>
</blockquote>
</li>
</ul>
<p>基本语法：**<code>grep [选项] 查找内容 源文件</code>**</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-n</td>
<td>显示匹配行及行号</td>
</tr>
<tr>
<td>-i</td>
<td>忽略字母大小写</td>
</tr>
</tbody></table>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查找home目录下hello.txt文件中含有“hello”字段的行及行号</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># cat hello.txt | grep -n &quot;linux&quot;</span></span><br><span class="line">4:linux</span><br><span class="line">[root@CentOS7 home]<span class="comment"># grep -n &quot;linux&quot; hello.txt </span></span><br><span class="line">4:linux</span><br></pre></td></tr></table></figure>

<h1 id="压缩和解压缩"><a href="#压缩和解压缩" class="headerlink" title="压缩和解压缩"></a>压缩和解压缩</h1><ul>
<li><p><strong><code>gzip/gunzip指令</code></strong></p>
<blockquote>
<p>gzip 用于压缩文件， 基本语法：**<code>gzip 文件</code><strong>，该命令只能将文件压缩成</strong><code> *.gz文件</code>**</p>
<p>gunzip是用于解压缩文件， 基本语法：**<code>gunzip 文件名.gz</code>**</p>
<p><strong>默认删除源文件</strong></p>
</blockquote>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 home]<span class="comment"># gzip /home/hello.txt</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># ls</span></span><br><span class="line">hello.txt.gz  sunwukong  wangpeng</span><br><span class="line">[root@CentOS7 home]<span class="comment"># gunzip /home/hello.txt.gz</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># ls</span></span><br><span class="line">hello.txt  sunwukong  wangpeng</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong><code>zip/unzip</code></strong></p>
<p>基本语法：</p>
<p><strong><code>zip [选项] *.zip(压缩后的文件名) 要压缩的文件</code></strong>    常用选项：**<code>-r</code>**，递归压缩</p>
<p><strong><code>unzip [选项] 要解压缩的文件</code></strong>     常用选项：**<code>-d &lt;目录&gt;</code>**  指定解压后文件的存放目录</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将home目录下所有文件压缩成myhome.zip</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># zip -r myhome.zip /home/</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># ls</span></span><br><span class="line">hello.txt  myhome.zip  sunwukong  wangpeng</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将myhome.zip解压缩到/home/wangpeng/目录下</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># unzip -d /home/wangpeng myhome.zip </span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># cd wangpeng</span></span><br><span class="line">[root@CentOS7 wangpeng]<span class="comment"># ls</span></span><br><span class="line">hello1.txt  home  公共  模板  视频  图片  文档  下载  音乐  桌面</span><br></pre></td></tr></table></figure>



<ul>
<li><p><strong><code>tar</code></strong></p>
<blockquote>
<p>Unix和类Unix系统上的压缩打包工具，可以将多个文件合并为一个文件，打包后的文件后缀亦为tar。</p>
</blockquote>
<p>当你想要压缩一大堆文件时，你得先将这一大堆文件先打成一个包（tar命令），然后再用压缩程序进行压缩（gzip bzip2命令）</p>
<p><strong>基本语法：</strong></p>
<p><strong><code>tar [选项] xxx.tar.gz 需要打包的内容</code></strong></p>
<p><strong><code>tar [选项] xxx.tar.gz -C&lt;目的目录&gt;</code></strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-c</td>
<td>生成.tar打包文件</td>
</tr>
<tr>
<td>-v</td>
<td>显示详细内容</td>
</tr>
<tr>
<td>-f</td>
<td>指定压缩后的文件名</td>
</tr>
<tr>
<td>-z</td>
<td>用 gzip 对存档压缩或解压</td>
</tr>
<tr>
<td>-x</td>
<td>解包.tar文件</td>
</tr>
</tbody></table>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打包并压缩home目录下的cat.txt、dog.txt以及hello.txt</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># tar -zcvf animal.tar.gz cat.txt dog.txt hello.txt </span></span><br><span class="line">cat.txt</span><br><span class="line">dog.txt</span><br><span class="line">hello.txt</span><br><span class="line">[root@CentOS7 home]<span class="comment"># ls</span></span><br><span class="line">animal.tar.gz  cat.txt  dog.txt  hello.txt  sunwukong  wangpeng</span><br></pre></td></tr></table></figure>

  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 解压缩animal.tar.gz</span></span><br><span class="line">[root@CentOS7 home]<span class="comment"># tar -zxvf animal.tar.gz </span></span><br><span class="line">cat.txt</span><br><span class="line">dog.txt</span><br><span class="line">hello.txt</span><br><span class="line">[root@CentOS7 home]<span class="comment"># ls</span></span><br><span class="line">animal.tar.gz  cat.txt  dog.txt  hello.txt  sunwukong  wangpeng</span><br></pre></td></tr></table></figure>

<h1 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h1><p>在 Linux 中我们可以使用 ll 或者 ls –l 命令来显示一个文件的属性以及文件所属的用户和组。</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cpermission.png" alt="permission.png"></p>
<p><strong>第一个字符（第0位）代表文件的类型</strong></p>
<ul>
<li>当为 <strong>d</strong> 时，则为目录</li>
<li>当为 <strong>-</strong>  时，则为普通文件</li>
<li>当为 <strong>l</strong>  时，则为链接文件</li>
<li>当为 <strong>c</strong> 时，则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li>
<li>当为 <strong>b</strong> 时，则表示为装置文件里面的可供储存的接口设备(可随机存取装置)。</li>
</ul>
<p>接下来的字符中，以三个为一组，且均为 rwx 的三个参数的组合。其中， r 代表**可读(read)<strong>、 w 代表</strong>可写(write)<strong>、 x 代表</strong>可执行(execute)**。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 - 而已。</p>
<p><strong>第 1-3位</strong>确定该文件的<strong>所有者</strong>拥有该文件的权限            —-user</p>
<p><strong>第4-6位</strong>确定所属组（所有者的同组用户）拥有该文件的权限          —-group</p>
<p><strong>第7-9位</strong>确定其他用户拥有该文件的权限                  —–others</p>
<ul>
<li><p><strong>rwx权限详解</strong></p>
<ol>
<li>rwx作用在文件上<ul>
<li>【r】代表可读：可以读取，查看</li>
<li>【w】代表可写：可以修改，但是不代表可以删除该文件，删除该文件的前提条件时对该文件所在的目录有写权限，才可以删除该文件。</li>
<li>【x】代表可执行</li>
</ul>
</li>
<li>rwx作用到目录上<ul>
<li>【r】代表可读：可以读取，ls查看目录内容</li>
<li>【w】代表可写：可以修改，可以在目录下创建、删除文件以及重命名目录</li>
<li>【x】代表可执行：可以进入该目录</li>
</ul>
</li>
<li>可用数字表示为：r = 4，w = 2，x = 1，因此rwx = 7</li>
</ol>
</li>
<li><p><strong><code>chown指令</code></strong></p>
<blockquote>
<p><strong>chown（change owner）：修改文件所有者</strong>，哪个用户创建了某个文件，那么这个文件的所有者就是这个用户。</p>
<p><strong>基本语法：chown 用户名 文件名</strong></p>
</blockquote>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cchown.png" alt="chown.png"></p>
</li>
<li><p><strong><code>chgrp指令</code></strong></p>
<blockquote>
<p><strong>chgrp（change group）:修改文件所在的组</strong>，当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。</p>
<p><strong>基本语法：chgrp 组名 文件名</strong></p>
</blockquote>
</li>
</ul>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cchgrp.png" alt="chgrp.png"></p>
<ul>
<li><p><strong><code>chmod指令</code></strong></p>
<p>基本说明：该指令可以修改文件或者目录的权限</p>
<p><strong>①第一种方法</strong>：</p>
<ol>
<li><p>给abc文件的所有者<strong>读写执行</strong>的权限，给所在组<strong>读执行</strong>的权限，给其他组<strong>读执行</strong>的权限。</p>
<p><strong><code>chmod u=rwx,g=rx,o=rx abc</code></strong></p>
</li>
<li><p>给abc文件的所有者<strong>除去执行</strong>的权限，给所属组<strong>增加写</strong>的权限。</p>
<p><strong><code>chmod u-x,g+w abc</code></strong></p>
</li>
<li><p>给abc文件的所有用户<strong>增加读</strong>的权限</p>
<p><strong><code>chmod a+r abc</code></strong></p>
</li>
</ol>
<p><strong>②第二种方法：</strong></p>
<p>通过数字变更权限</p>
<p>r = 4，w = 2， x = 1</p>
<p>案例演示：</p>
<p>将/home/abc.txt文件的权限修改成**<code>rwxr-xr-x</code>**使用数字的方式实现：</p>
<p><strong>chmod 755 /home/abc.txt</strong></p>
</li>
</ul>
<h1 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h1><p>任务调度：是指系统在哪个时间段执行特定的命令或程序</p>
<p>基本语法：**<code>crontab【选项】</code>**</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>-e</td>
<td>编辑crontab定时</td>
</tr>
<tr>
<td>-l</td>
<td>查询crontab任务</td>
</tr>
<tr>
<td>-r</td>
<td>删除当前用户所有的crontab任务</td>
</tr>
</tbody></table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">先执行crontab -e命令</span><br><span class="line">接着再输入</span><br><span class="line">*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt</span><br></pre></td></tr></table></figure>

<h1 id="磁盘分区和挂载"><a href="#磁盘分区和挂载" class="headerlink" title="磁盘分区和挂载"></a>磁盘分区和挂载</h1><p>将分区挂载到目录中，实现磁盘与目录之间的联系。当系统中进入目录时，相当于访问这个分区。</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cmount.png" alt="mount.png"></p>
<ul>
<li><p>查看所有设备挂载情况</p>
<p>基本语法：lsblk  或者 lsblk -f</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f           显示文件系统信息。</span><br></pre></td></tr></table></figure></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 ~]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT</span><br><span class="line">sda                                                                                </span><br><span class="line">├─sda1          xfs                         5d6d3a8f-ce6c-46f0-8845-3ab262d4ea07   /boot</span><br><span class="line">└─sda2          LVM2_member                 VAI02s-KL5T-YdIS-ebvi-QRV3-yMSa-SRYYeC </span><br><span class="line">  ├─centos-root xfs                         4bdae3bd-7bfa-4546-94f3-7d0c53ddde15   /</span><br><span class="line">  └─centos-swap swap                        6d03fb36-1255-4271-8522-9ecce67cae53   [SWAP]</span><br><span class="line">sr0             iso9660     CentOS 7 x86_64 2020-11-04-11-36-43-00                 /run/media/root/CentOS 7 x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>①给虚拟机增加一块新硬盘：</strong></p>
<p>![add new disk.png](linux\add new disk.png)</p>
<p><strong>②</strong>查看设备挂载情况</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Clsblk.png" alt="lsblk.png"></p>
<p>我们可以发现，发现sdb磁盘没有分区，分区命令：**<code>fdisk /dev/sdb</code>**</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cpartition.png" alt="partition.png"></p>
<p>这时候就给sdb增加了一个分区sdb1，我们可以通过命令 <strong>lsblk</strong> 查看</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Csdb1.png" alt="sdb1.png"></p>
<p>但这个时候，我们还需要给这个分区格式化，格式化命令：**<code>mkfs -t ext4 /dev/sdb1</code>**           -t 表示类型type</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cpartition_format.png" alt="partition_format.png"></p>
<p>我们可以看到，sdb1分区格式化之后，可以看到它的UUID</p>
<p>接下来将/dev/sdb1挂载到/newdisk目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 /]<span class="comment"># mount /dev/sdb1 /newdisk/</span></span><br><span class="line">[root@CentOS7 /]<span class="comment"># lsblk -f</span></span><br><span class="line">NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT</span><br><span class="line">sda                                                                                </span><br><span class="line">├─sda1          xfs                         5d6d3a8f-ce6c-46f0-8845-3ab262d4ea07   /boot</span><br><span class="line">└─sda2          LVM2_member                 VAI02s-KL5T-YdIS-ebvi-QRV3-yMSa-SRYYeC </span><br><span class="line">  ├─centos-root xfs                         4bdae3bd-7bfa-4546-94f3-7d0c53ddde15   /</span><br><span class="line">  └─centos-swap swap                        6d03fb36-1255-4271-8522-9ecce67cae53   [SWAP]</span><br><span class="line">sdb                                                                                </span><br><span class="line">└─sdb1          ext4                        c041abec-8ba4-4c89-9b41-cb3327b57ef7   /newdisk</span><br><span class="line">sr0             iso9660     CentOS 7 x86_64 2020-11-04-11-36-43-00                 /run/media/root/CentOS 7 x86_64</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h1><ul>
<li><p>查询系统整体磁盘使用情况</p>
<p>基本语法：<strong>df  - h</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@CentOS7 /]<span class="comment"># df -h</span></span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs                 894M     0  894M    0% /dev</span><br><span class="line">tmpfs                    910M     0  910M    0% /dev/shm</span><br><span class="line">tmpfs                    910M   11M  900M    2% /run</span><br><span class="line">tmpfs                    910M     0  910M    0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root   38G  4.8G   34G   13% /</span><br><span class="line">/dev/sda1                197M  163M   35M   83% /boot</span><br><span class="line">tmpfs                    182M   28K  182M    1% /run/user/0</span><br><span class="line">/dev/sr0                 4.4G  4.4G     0  100% /run/media/root/CentOS 7 x86_64</span><br><span class="line">/dev/sdb1                991M  2.6M  922M    1% /newdisk</span><br></pre></td></tr></table></figure>

<ul>
<li><p>查询指定目录的磁盘占用情况</p>
<p>基本语法：<strong>du - h   目录</strong>，默认为当前目录。</p>
<p>options：- a 含文件    –max-depth = 1 子目录深度   - h 人性化一些，计量单位表示出来</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cdu.png" alt="du.png"></p>
</li>
</ul>
</li>
</ul>
<h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><p>设置静态ip，方便我们远程访问。</p>
<p>有两种方法：一种是在图形化界面中设置即可，另一种以敲命令的方式改网卡的配置。</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cmodify.png" alt="modify.png"></p>
<p>通过命令**<code>cat /etc/sysconfig/network-scripts/ifcfg-ens33</code>**查看网卡配置信息</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5C%E6%9F%A5%E7%9C%8B%E7%BD%91%E5%8D%A1%E9%85%8D%E7%BD%AE.png" alt="查看网卡配置.png"></p>
<p><strong>当前ip为：inet 192.168.116.131</strong></p>
<p><strong>我们将其修改为静态ip：192.168.200.138</strong></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cstatic.png" alt="static.png"></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5CVMnet8.png" alt="VMnet8.png"></p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5CVMnet8_%E7%BD%91%E5%85%B3.png" alt="VMnet8_网关.png"></p>
<h1 id="主机名和hosts映射"><a href="#主机名和hosts映射" class="headerlink" title="主机名和hosts映射"></a>主机名和hosts映射</h1><p>修改主机名，我们可以修改**/etc/hostname**配置文件</p>
<p>记忆毫无规律的ip地址对于人来说有点困难，所以我们可以将主机名和ip地址映射起来，这样我们只需要记忆主机名就可以了。</p>
<ol>
<li><p>宿主机进入到<strong>C:\Windows\System32\drivers\etc\hosts</strong>文件中，增加一行数据。<strong>192.168.200.138   CentOS7</strong></p>
</li>
<li><p>ping CentOS7</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cping_hostname.png" alt="ping_hostname.png"></p>
</li>
<li><p>虚拟机进入到**/etc/hosts**</p>
<p>增加一行数据，<strong>192.168.200.1  host_machine</strong></p>
<p>ping host_machine</p>
</li>
</ol>
<h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><p>Linux ps （英文全拼：process status）命令用于显示当前进程的状态，类似于 windows 的任务管理器。</p>
<p>实例：系统中是否有sshd服务</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cprocess_status.png" alt="process_status.png"></p>
<h1 id="RPM包的管理"><a href="#RPM包的管理" class="headerlink" title="RPM包的管理"></a>RPM包的管理</h1><ul>
<li><p>查询</p>
<p>rpm -qa :查询所安装的所有rpm软件包</p>
<p>rpm -qa  |  more</p>
<p>rpm  -qa  | grep firefox</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/firefox.png" alt="firefox.png"></p>
<p>rpm  -qi  软件包名    ：查询软件包信息</p>
<p>rpm  -q  firefox：查询软件包是否安装</p>
</li>
</ul>
<ul>
<li><p>卸载</p>
<p>rpm  -e  RPM包的名称   //  - e 表示erase</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cerase.png" alt="erase.png"></p>
</li>
<li><p>安装</p>
<p>rpm - ivh  RPM包全路径名称</p>
<p>参数说明：</p>
<p>i  =  install  安装</p>
<p>v =  verbose 提示</p>
<p>h =  hash 进度条</p>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cinstall.png" alt="install.png"></p>
</li>
</ul>
<h1 id="YUM包管理"><a href="#YUM包管理" class="headerlink" title="YUM包管理"></a>YUM包管理</h1><p>Yum是一个Shell前端软件包管理器，基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p>
<ul>
<li><p>查询yum服务器是否有需要安装的软件</p>
<p>yum  list | grep xx</p>
</li>
<li><p>安装指定的yum包</p>
<p>yum install xx</p>
</li>
</ul>
<p><img src="/2022/05/05/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/linux%5Cyum.png" alt="yum.png"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven笔记</title>
    <url>/2022/03/27/Maven%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h1><p>Maven是专门用于管理和构建Java项目的工具，它的主要功能有：</p>
<ul>
<li>提供了一套标准化的项目结构</li>
<li>提供了一套标准化的构建流程（编译，测试，打包，发布.）</li>
<li>提供了一套依赖管理机制</li>
</ul>
<ol>
<li><p>标准化的项目结构</p>
<p>不同IDE之间，项目结构不一样，不通用。而Maven提供了一套标准化的项目结构，所有IDE使用Maven构建的项目结构完全一样，所有IDE创建的Maven项目可以通用。其中src包含源代码和测试代码目录，pom.xml是项目核心配置文件。</p>
<p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/Maven.png" alt="Maven.png"></p>
</li>
<li><p>仓库分类</p>
<p>本地仓库：自己计算机上的一个目录<br>中央仓库：由Maven团队维护的全球唯一的仓库，地址：<a href="https://repo1.maven.org/maven2/">Click me</a><br>远程仓库（私服）：一般由公司团队搭建的私有仓库</p>
<p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/repository.png" alt="repository.png"></p>
</li>
</ol>
<h1 id="Maven安装配置"><a href="#Maven安装配置" class="headerlink" title="Maven安装配置"></a>Maven安装配置</h1><ol>
<li>Maven安装地址：<a href="https://maven.apache.org/download.cgi">Click me</a></li>
</ol>
<p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/Maven_download.png" alt="Maven_download.png"></p>
<ol start="2">
<li>下载后，解压到D:\Software目录下。</li>
</ol>
<p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/maven%E5%AD%98%E6%94%BE%E5%9C%B0%E5%9D%80.png" alt="maven存放地址.png"></p>
<ol start="3">
<li>配置环境变量。</li>
</ol>
<p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/environment_one.png" alt="environment_one.png"></p>
<p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/environment_two.png" alt="environment_two"></p>
<ol start="4">
<li><p>配置本地仓库：修改<code>conf/settings.xml</code>中<code>&lt;localRepository&gt;</code>标签为一个指定目录。<img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/local_respository.png" alt="local_respository.png"></p>
</li>
<li><p>配置阿里云私服：修改<code>conf/settings.xml</code>中的<code>&lt;mirrors&gt;</code>标签。</p>
<p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/mirror_respository.png" alt="mirror_respository.png"></p>
</li>
</ol>
<h1 id="IDEA配置Maven"><a href="#IDEA配置Maven" class="headerlink" title="IDEA配置Maven"></a>IDEA配置Maven</h1><p><img src="/2022/03/27/Maven%E7%AC%94%E8%AE%B0/idea.png" alt="idea"></p>
<h1 id="Maven坐标详解"><a href="#Maven坐标详解" class="headerlink" title="Maven坐标详解"></a>Maven坐标详解</h1><ol>
<li><p>什么是坐标？</p>
<ul>
<li><p>Maven中的坐标是资源的唯一标识</p>
</li>
<li><p>使用坐标来定义项目或引入项目中需要的依赖</p>
</li>
</ul>
</li>
<li><p>Maven坐标主要组成<br><strong>groupld：</strong>定义当前Maven项目隶属组织名称（通常是域名反写）<br><strong>artifactld：</strong>定义当前Maven项目名称（通常是模块名称）<br><strong>version：</strong>定义当前项目版本号</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入 mysql驱动jar包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Python文件操作</title>
    <url>/2021/11/21/Python%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Python文件操作"><a href="#Python文件操作" class="headerlink" title="Python文件操作"></a>Python文件操作</h1><p>读文件：打开文件    读文件    关闭文件</p>
<p>写文件：打开文件    写文件    关闭文件</p>
<h2 id="open-方法"><a href="#open-方法" class="headerlink" title="open()方法"></a>open()方法</h2><p><code>open()</code>returns a <strong>file object</strong> and is most commonly used with two arguments: <code>open(filename, mode)</code>.</p>
<blockquote>
<p>The <strong>first argument</strong> is a string containing the filename. The <strong>second argument</strong> is another string containing a few characters describing the way in which the file will be used</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;./demo01.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fp.read())</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;./demo01.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">fp.write(<span class="string">&quot;This is first line\nThis is the second line&quot;</span>)</span><br><span class="line">fp.close()</span><br></pre></td></tr></table></figure>

<blockquote>
<p>size is an optional numeric argument. When <em>size</em> is <strong>omitted or negative</strong>, the entire contents of the file will be read and returned; </p>
</blockquote>
<p>如果<code>read(size)</code>方法里面的参数值为<strong>空</strong>或者<strong>负数</strong>，则文件中的数据将全部被读取。</p>
<p>如果为n（n&gt;0）的话，将读取n个字节的数据。</p>
<h2 id="readline-方法"><a href="#readline-方法" class="headerlink" title="readline()方法"></a>readline()方法</h2><p>读取一行的数据，包括换行字符\n.</p>
<h2 id="readlines-方法"><a href="#readlines-方法" class="headerlink" title="readlines()方法"></a>readlines()方法</h2><p>读取文件中全部行的数据，并以<strong>列表</strong>的方式返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&quot;./demo01.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fp.readlines())</span><br><span class="line">fp.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line">[<span class="string">&#x27;This is first line\n&#x27;</span>, <span class="string">&#x27;This is the second line&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h2 id="with语句"><a href="#with语句" class="headerlink" title="with语句"></a>with语句</h2><blockquote>
<p>It is good practice to use the <a href="https://docs.python.org/3/reference/compound_stmts.html#with"><code>with</code></a> keyword when dealing with file objects. </p>
</blockquote>
<ul>
<li>with语句可以自动关闭文件，而不用我们手动去关闭。</li>
<li><code>with open(&quot;filename&quot;, &quot;open_mode&quot;) as fp:</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./demo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, ) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(<span class="string">&quot;测试with语句&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(fp.closed)               <span class="comment"># true</span></span><br></pre></td></tr></table></figure>

<h2 id="tell-方法"><a href="#tell-方法" class="headerlink" title="tell()方法"></a>tell()方法</h2><blockquote>
<p><code>f.tell()</code> returns an integer giving the file object’s current position in the file </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./demo01.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="built_in">print</span>(fp.readline(), end=<span class="string">&#x27;&#x27;</span>)   <span class="comment"># This as the first line</span></span><br><span class="line">    <span class="built_in">print</span>(fp.tell())               <span class="comment"># 24</span></span><br><span class="line">    <span class="built_in">print</span>(fp.read())               <span class="comment"># This is the second line</span></span><br></pre></td></tr></table></figure>

<h2 id="seek-方法"><a href="#seek-方法" class="headerlink" title="seek()方法"></a>seek()方法</h2><blockquote>
<p>To change the file object’s position, use <code>f.seek(offset, whence)</code></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fileObject.seek(offset[, whence])</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>seek()</strong> 方法:用于移动<strong>文件对象指针</strong>到指定位置。</li>
<li><strong>offset ：</strong>开始的偏移量，也就是代表需要移动偏移的字节数</li>
<li><strong>whence：</strong>可选，默认值为 0。表示要从哪个位置开始偏移；0代表从文件开头开始算起，1代表从当前位置开始算起，2代表从文件末尾算起。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./demo01.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.seek(<span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">    fp.write(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    fp.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(fp.read())</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python面向对象</title>
    <url>/2022/03/01/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h1><p>在<code>python</code>中对象几乎是无处不在的，变量、数据、函数都是对象。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一条测试类&quot;&quot;&quot;</span></span><br><span class="line">    variable = <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(Demo))</span><br><span class="line"><span class="built_in">print</span>(Demo.__doc__)</span><br><span class="line"><span class="built_in">print</span>(Demo.variable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__call__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__closure__&#x27;</span>, <span class="string">&#x27;__code__&#x27;</span>, <span class="string">&#x27;__defaults__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__get__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__globals__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__kwdefaults__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__qualname__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>]</span><br><span class="line">这是一个测试函数</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="定义一个简单的类"><a href="#定义一个简单的类" class="headerlink" title="定义一个简单的类"></a>定义一个简单的类</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法名(<span class="params">self, 参数列表</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：<strong>类名</strong>的命名规则要符合<strong>大驼峰命名法</strong></p>
<p>定义类时，如果当前类没有确切的父类，则可继承object</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个猫类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫爱吃鱼&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">drink</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;小猫在喝水&quot;</span>)</span><br><span class="line">        </span><br><span class="line">tom = Cat()</span><br><span class="line">tom.eat()</span><br><span class="line">tom.drink()</span><br></pre></td></tr></table></figure>

<ul>
<li>在<code>Python</code>中使用类创建对象之后，<code>tom</code>变量中记录的是<strong>对象在内存中的地址</strong></li>
<li>也就是说<code>tom</code>变量引用了新建的猫对象</li>
<li>使用<code>print</code>输出对象变量，默认情况下，能够输出类名以及内存地址</li>
<li>这里的<strong>self</strong>其实是个对象，类似于Java中的this</li>
</ul>
<p><img src="/2022/03/01/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/self.png" alt="self"></p>
<p><img src="/2022/03/01/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/cat.png" alt="cat"></p>
<h2 id="init-方法"><a href="#init-方法" class="headerlink" title="__init__方法"></a><code>__init__</code>方法</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>爱吃鱼&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat = Animal(<span class="string">&quot;小猫&quot;</span>)</span><br><span class="line">cat.eat()</span><br><span class="line"><span class="built_in">print</span>(cat)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>当使用<code>类名</code>创建对象时，会<strong>自动</strong>执行以下操作：</p>
<ol>
<li><p>为对象在内存中<strong>分配空间</strong>  - - 创建对象</p>
</li>
<li><p>为对象的属性<strong>设置初始值</strong>  - - 初始化方法(<code>__init__</code>)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 验证初始化方法在创建对象时自动被调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Initial</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是一个初始化方法！！&quot;</span>)</span><br><span class="line">       </span><br><span class="line">demo = Initial()</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h2 id="str-方法"><a href="#str-方法" class="headerlink" title="__str__方法"></a><code>__str__方法</code></h2><ul>
<li><p>在<code>Python</code>中，使用<code>print</code>输出<strong>对象变量</strong>，默认情况下，会输出创建该对象的类名以及在内存中的地址</p>
</li>
<li><p>如果希望对该输出值做出改变，想自定义输出的内容，则可以重写<code>__str__</code>方法</p>
<blockquote>
<p><em>注意：该方法必须返回一个字符串</em></p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是自定义内容&quot;</span></span><br><span class="line">    </span><br><span class="line">tom = Demo(<span class="string">&quot;Tom&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(tom)</span><br></pre></td></tr></table></figure>

<h2 id="私有属性和私有方法"><a href="#私有属性和私有方法" class="headerlink" title="私有属性和私有方法"></a>私有属性和私有方法</h2><ul>
<li>在定义属性或方法时，以双下划线开头，在外界不能够直接访问。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__secret</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;self.name&#125;</span>的年龄为<span class="subst">&#123;self.__age&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承的概念：子类拥有<strong>父类</strong>的所有<strong>方法和属性</strong></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名(<span class="params">父类名</span>):</span></span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>



<h3 id="继承的传递性"><a href="#继承的传递性" class="headerlink" title="继承的传递性"></a>继承的传递性</h3><ul>
<li><strong>子类</strong>拥有<strong>父类</strong>以及<strong>其父类的父类</strong>中封装的所有属性和方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eat</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&quot;吃饭了！&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.name + <span class="string">&quot;睡觉了！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">puppy = Subclass(<span class="string">&quot;puppy&quot;</span>)</span><br><span class="line">puppy.eat()</span><br><span class="line">puppy.bark()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><p>重写方法有两种情况：</p>
<ol>
<li><strong>覆盖</strong>父类的方法<ul>
<li>当<strong>父类</strong>的方法不能满足子类需求时，可以对方法进行<strong>重写（override）</strong></li>
<li>在子类中定义一个和<strong>父类同名</strong>的方法并且实现</li>
<li>重写之后，在运行时只会调用子类中重写的方法，而不会去调用父类封装的方法</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪汪！！！&quot;</span>)  <span class="comment">#在子类Subclass中重定义父类Dog中的bark方法</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>对父类方法进行<strong>扩展</strong><ul>
<li>子类的方法实现中包含父类的方法实现</li>
<li>添加<code>super().父类方法</code>来调用父类方法</li>
</ul>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subclass</span>(<span class="params">Dog</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bark</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().bark()     <span class="comment"># 调用原本在父类封装的方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;汪汪汪汪！！！&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><ul>
<li>子类可以拥有<strong>多个父类</strong>，并且可以具有多个父类的属性和方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 子类名(<span class="params">父类名<span class="number">1</span>, 父类名<span class="number">2.</span>..</span>)</span></span><br><span class="line"><span class="class">      <span class="title">pass</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/2022/03/01/Python%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/father.png" alt="father"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">a</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是A类！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">b</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是B类！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>(<span class="params">A, B</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">test = C()</span><br><span class="line">test.a()</span><br><span class="line">test.b()</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote>
<p>对于同一个方法，由于调用的对象不同，最终实现不同的效果</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义鼠标类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mouse</span>(<span class="params">Computer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;鼠标启动成功！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义键盘类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyBoard</span>(<span class="params">Computer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;键盘启动成功！！&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = Mouse()</span><br><span class="line">m.start()</span><br><span class="line">k = KeyBoard()</span><br><span class="line">k.start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><ul>
<li>类变量定义在<strong>类中</strong>且在<strong>函数体之外</strong><ol>
<li>定义一个<strong>工具类</strong></li>
<li>需求：需要知道使用这个工具类创建了多少个工具对象？</li>
</ol>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tool</span>:</span></span><br><span class="line">    <span class="comment"># 定义类属性 记录创建工具对象的个数</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        Tool.count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">tool1 = Tool(<span class="string">&quot;榔头&quot;</span>)</span><br><span class="line">tool2 = Tool(<span class="string">&quot;铁锹&quot;</span>)</span><br><span class="line">tool3 = Tool(<span class="string">&quot;锤子&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(Tool.count)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="注册GitHub账号"><a href="#注册GitHub账号" class="headerlink" title="注册GitHub账号"></a>注册GitHub账号</h1><p>搭建博客需要GitHub账号，这样我们就可以将博客发布到GitHub上去，让GitHub帮我们托管。<br><a href="https://github.com/">GitHub官网</a></p>
<p>如果未注册，可以点击主页右上角的Sign up来进行相应的注册。如果已经注册，直接登录即可。<br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/github_homepage.png" alt="github_homepage"><br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Sign_in.png" alt="Sign_in"><br>创建仓库名一定要按照your_username.github.io的格式取名。<br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/new_repository.png" alt="new_repostitory"></p>
<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><p>git可以将本地仓库push到github远程仓库上去。<br><a href="https://git-scm.com/">git官网</a><br>进入git官网后，我们可以根据自己电脑的类型选择合适的git版本。我是windows系统的笔记本，所以选择windows的git版本。下载完后，安装过程记得修改安装路径，最好安装在除C盘以外的其他盘，其他就一直next，一直下一步即可。<br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/git_download.png" alt="git_download"><br>安装结束后，win+R启动cmd，输入以下命令<br><code>git --version</code><br>能显示git版本号就说明安装成功了。</p>
<h1 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h1><p><a href="https://nodejs.org/en/download/">nodejs官网</a><br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/nodejs.png" alt="nodejs"><br>选择合适的版本下载，安装过程一直下一步即可。<br>安装完成后，测试一下是否安装成功，输入以下命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>分别显示版本号即安装成功。</p>
<h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>我们可以在D盘新建一个文件夹，文件夹取名为Blog，进入该文件夹后，鼠标右击打开Git Bash Here，输入以下命令来安装hexo。<br><code>npm install -g hexo-cli</code><br>耐心等待一下啊！安装成功后，输入以下命令来初始化博客。<br><code>hexo init</code><br>接着再输入以下命令来静态部署<br><code>hexo g</code><br>等部署完成后，开启本地服务器来预览一下效果<br><code>hexo s</code><br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/hexo_s.png" alt="hexo_s"><br>浏览器输入 <a href="http://localhost:4000/">http://localhost:4000</a> 即可打开部署好的网页。ctrl + c停止服务器。</p>
<h1 id="安装sublime编辑器"><a href="#安装sublime编辑器" class="headerlink" title="安装sublime编辑器"></a>安装sublime编辑器</h1><p><a href="https://www.sublimetext.com/">sublime官网</a></p>
<span id="more"></span>

<h1 id="部署到github上"><a href="#部署到github上" class="headerlink" title="部署到github上"></a>部署到github上</h1><p>1.打开git bash设置你的用户名和邮箱地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;wangpeng_developer&quot;            # 名称</span><br><span class="line">$ git config --global user.email &quot;webberwang@foxmail.com&quot;       # 地址</span><br></pre></td></tr></table></figure>
<p>我们也可以通过命令 git config –global –list查看我们刚才配置的信息<br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/git_config.png" alt="git_config"></p>
<p>2.SSH key 配置</p>
<p>通过rsa算法生成密钥，然后再将生成的公钥添加到GitHub上<br><code>$ ssh-keygen -t rsa</code><br>生成的密钥文件保存在C:/Users/webbe/.ssh目录下<br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/ssh.png" alt="ssh"><br>右击id_rsa.pub文件以sublime方式打开<br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/pub_ssh.png" alt="pub_ssh"><br>ctrl + A 全部复制，然后再进入github中，进入设置，点击SSH and GPG keys,然后点击New SSH key<br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/SSH_01.png" alt="SSH_01"><br><img src="/2021/11/14/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/SSH_02.png" alt="SSH_02"><br>验证是否成功，我们可以打开git bash输入以下命令 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi wangpeng-developer! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure>

<p>3.修改_config.yml文件<br>用sublime打开Blog目录下的_config.yml文件，翻到最下面的deployment配置。<br><strong>注意</strong>：branch后面填的值视情况而定，要看你建的仓库的主分支默认是master还是main，我仓库默认主分支为main</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: https://github.com/wangpeng-developer/wangpeng-developer.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<p>4.安装Git部署插件并发布上GitHub</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
